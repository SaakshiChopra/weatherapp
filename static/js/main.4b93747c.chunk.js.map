{"version":3,"sources":["Weather3.js","App.js","reportWebVitals.js","index.js"],"names":["Meta","Card","Weather3","useState","city","setCity","wdata","setWdata","im","setIm","k","setK","useEffect","k1","weather","s","length","id","console","log","getImg","rid","style","marginTop","width","marginLeft","placeholder","onChange","e","target","value","onKeyPress","event","key","fetch","then","response","json","data","main","hoverable","padding","cover","src","title","description","name","textAlign","fontSize","temp","cod","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLAKQA,EAASC,IAATD,KA2GOE,EA1GE,WACf,MAAsBC,mBAAS,IAA/B,mBAAKC,EAAL,KAAWC,EAAX,KACA,EAAwBF,mBAAS,CAAC,KAAlC,mBAAKG,EAAL,KAAYC,EAAZ,KACA,EAAkBJ,mBAAS,mBAA3B,mBAAKK,EAAL,KAASC,EAAT,KACA,EAA4BN,qBAA5B,mBACA,GADA,UACgBA,mBAAS,IAAzB,mBAAKO,EAAL,KAAQC,EAAR,KAEAC,qBAAU,WACR,IAAIC,EAAKP,EAAMQ,QAEXC,EAAIF,GAAMA,EAAGG,OAASH,EAAG,GAAGI,GAAK,KACrCC,QAAQC,IAAIJ,GAEZK,EAAOL,KACN,CAACL,IACJ,IAAMU,EAAS,SAACC,GACdH,QAAQC,IAAIE,GAGVZ,EADEY,GAAO,KAAOA,GAAO,IACjB,mBACGA,GAAO,KAAOA,GAAO,IACxB,wBACGA,GAAO,KAAOA,GAAO,IACxB,qBACGA,GAAO,KAAOA,GAAO,IACxB,qBACGA,GAAO,KAAOA,GAAO,IACxB,kBACGA,GAAO,KAAOA,GAAO,IACxB,uBACU,KAAPA,EACH,sBAEA,qBAiBV,OACE,mCACE,sBACEC,MAAO,CACLC,UAAW,QAFf,UAKE,uBACED,MAAO,CAAEE,MAAO,MAAOC,WAAY,SACnCC,YAAY,8BACZC,SAAU,SAACC,GAAD,OAAOvB,EAAQuB,EAAEC,OAAOC,QAClCA,MAAO1B,EACP2B,WA1BW,SAACC,GACD,SAAbA,EAAMC,KACRC,MAAM,qDAAD,OACkD9B,EADlD,yDAGF+B,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL/B,EAAS+B,GACTjC,EAAQ,IACRM,EAAKD,EAAI,SAoBX,uBACuB,qBAAfJ,EAAMiC,KACZ,8BACE,cAAC,IAAD,CACEC,WAAS,EACTlB,MAAO,CAAEE,MAAO,IAAKC,WAAY,QAASgB,QAAS,QACnDC,MAAO,qBAAKC,IAAI,oBAHlB,SAKE,cAAC3C,EAAD,CACE4C,MAAM,4BACNC,YAAY,6CAKlB,8BAKE,eAAC,IAAD,CACEL,WAAS,EACTlB,MAAO,CAAEE,MAAO,IAAKC,WAAY,QAASgB,QAAS,QACnDC,MAAO,qBAAKC,IAAKnC,IAHnB,UAKE,cAACR,EAAD,CAAM4C,MAAOtC,EAAMwC,OACnB,mBAAGxB,MAAO,CAAEyB,UAAW,OAAQC,SAAU,QAAzC,SACG1C,EAAMQ,QAAQ,GAAGyB,OAEpB,oBAAGjB,MAAO,CAAEyB,UAAW,QAASC,SAAU,QAA1C,UACG,IACA1C,EAAMiC,KAAKU,KAFd,QAEsB,YAKb,QAAd3C,EAAM4C,IAAgB,+CAAwB,mCCrGxCC,EALL,WACR,OAAO,mCACP,cAAC,EAAD,OCSaC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4b93747c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nimport { Card } from \"antd\";\r\n\r\nconst { Meta } = Card;\r\nconst Weather3 = () => {\r\n  let [city, setCity] = useState(\"\");\r\n  let [wdata, setWdata] = useState([{}]);\r\n  let [im, setIm] = useState(\"./images/b1.jpg\");\r\n  let [rangeId, setRangeid] = useState();\r\n  let [k, setK] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let k1 = wdata.weather;\r\n\r\n    let s = k1 && k1.length ? k1[0].id : null;\r\n    console.log(s);\r\n\r\n    getImg(s);\r\n  }, [k]);\r\n  const getImg = (rid) => {\r\n    console.log(rid);\r\n\r\n    if (rid >= 200 && rid <= 232) {\r\n      setIm(\"./images/th1.jpg\");\r\n    } else if (rid >= 300 && rid <= 321) {\r\n      setIm(\"./images/drizzle1.jpg\");\r\n    } else if (rid >= 500 && rid <= 531) {\r\n      setIm(\"./images/rain1.jpg\");\r\n    } else if (rid >= 600 && rid <= 622) {\r\n      setIm(\"./images/snow1.jpg\");\r\n    } else if (rid >= 701 && rid <= 781) {\r\n      setIm(\"./images/m1.jpg\");\r\n    } else if (rid >= 801 && rid <= 804) {\r\n      setIm(\"./images/cloudy1.jpg\");\r\n    } else if (rid == 800) {\r\n      setIm(\"./images/clear2.jpg\");\r\n    } else {\r\n      setIm(\"./images/df1.jpg\");\r\n    }\r\n  };\r\n  const getWeather = (event) => {\r\n    if (event.key == \"Enter\") {\r\n      fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=cd379e332ef865d973c7ec80318605eb`\r\n      )\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setWdata(data);\r\n          setCity(\"\");\r\n          setK(k + 1);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          marginTop: \"10px\",\r\n        }}\r\n      >\r\n        <input\r\n          style={{ width: \"30%\", marginLeft: \"400px\" }}\r\n          placeholder=\"Enter city and press ENTER.\"\r\n          onChange={(e) => setCity(e.target.value)}\r\n          value={city}\r\n          onKeyPress={getWeather}\r\n        />\r\n\r\n        <br />\r\n        {typeof wdata.main === \"undefined\" ? (\r\n          <div>\r\n            <Card\r\n              hoverable\r\n              style={{ width: 600, marginLeft: \"300px\", padding: \"10px\" }}\r\n              cover={<img src=\"./images/b1.jpg\" />}\r\n            >\r\n              <Meta\r\n                title=\"What's the weather today?\"\r\n                description=\"Enter your city to know your weather\"\r\n              />\r\n            </Card>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            {/*  <img src=\"./images/m1.jpg\" width=\"100%\" height=\"50%\" />\r\n      style={{backgroundImage: \"url('{im}')\"}}\r\n      */}\r\n\r\n            <Card\r\n              hoverable\r\n              style={{ width: 600, marginLeft: \"300px\", padding: \"10px\" }}\r\n              cover={<img src={im} />}\r\n            >\r\n              <Meta title={wdata.name} />\r\n              <p style={{ textAlign: \"left\", fontSize: \"13px\" }}>\r\n                {wdata.weather[0].main}\r\n              </p>\r\n              <p style={{ textAlign: \"right\", fontSize: \"20px\" }}>\r\n                {\" \"}\r\n                {wdata.main.temp}Â°C{\" \"}\r\n              </p>\r\n            </Card>\r\n          </div>\r\n        )}\r\n        {wdata.cod === \"404\" ? <p>CITY NOT FOUND</p> : <></>}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Weather3;\r\n","import Weather3 from \"./Weather3\";\nconst App=()=>{\n  return(<>\n  <Weather3/>\n  </>)\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}